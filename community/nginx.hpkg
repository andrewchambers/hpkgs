(use ../prelude)
(import ../core)
(use ./file)
(use ./openssl)
(use ./pcre)
(use ./zlib)

# NOTE to start nginx from a hpkg, you probably need to invoke the binary with
# the -p switch (prefix) so nginx doesn't try to create directories and stuff
# inside the hpkg.

(defsrc nginx-src
  :file-name
  "nginx-1.17.10.tar.gz"
  :url
  "https://nginx.org/download/nginx-1.17.10.tar.gz"
  :hash
   "sha256:a9aa73f19c352a6b166d78e2a664bb3ef1295bbe6d3cc5aa7404bd4664ab4b83")

(defpkg nginx
  :builder
   (fn []
     (os/setenv "PATH"
                (string "/bin:"
                        (join-pkg-paths ":" "/bin"
                                        [core/awk
                                         core/coreutils
                                         core/diffutils
                                         file
                                         core/gcc
                                         core/grep
                                         core/make
                                         core/sed])))
     # XXX: may end up using system's file for non-chrooted setups
     (unless (os/lstat "/usr/bin/file")
       (os/mkdir "/usr")
       (os/mkdir "/usr/bin")
       (os/symlink (string (file :path) "/bin/file")
                   "/usr/bin/file"))
     (os/setenv "CFLAGS" *default-cflags*)
     (os/setenv "LDFLAGS" *default-ldflags*)
     (unpack-src nginx-src)
     (core/link-/bin/sh)
     (unpack-src openssl-src)
     (unpack-src pcre-src)
     (unpack-src zlib-src)
     (sh/$ ./configure
           --prefix= ^ (dyn :pkg-out)
           # XXX: hmmm...version numbers...
           --with-openssl= ^ ./openssl-1.1.1g
           --with-pcre= ^ ./pcre-8.44
           --with-zlib= ^ ./zlib-1.2.11)
     (sh/$ make
           -j (dyn :parallelism))
     (sh/$ make
           install)))
