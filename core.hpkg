
(def- seed-hash "sha256:7b78403abeaacb89175b2501e91c8def7ad91287449542133bdd805c50daa645")

# Some strong suggestions to packages.
(def *cflags* "-O3 -fstack-protector")

(def seed
  (fetch
    :url
      "https://github.com/andrewchambers/hermes-seeds/raw/master/seed.tar.gz"
    :hash
      seed-hash))

(def seed-env
  (pkg
    :name
      "seed"
    :builder
      |(unpack ;(sh/glob (string (seed :path) "/*")) :dest (dyn :pkg-out))))

(defn ensure-/bin/sh []
  # In sandbox modes where we can't control /, /bin/sh will already exist.
  (unless (os/lstat "/bin/sh")
    (os/symlink (string (seed-env :path) "/bin/busybox") "/bin/sh")))

(def make-src
  (fetch
    :url
      "https://ftp.gnu.org/gnu/make/make-4.2.tar.gz"
    :hash
      "sha256:e968ce3c57ad39a593a92339e23eb148af6296b9f40aa453a9a9202c99d34436"))

(def make
  (pkg
    :name "make"
    :builder
    (fn []
      (ensure-/bin/sh)
      (os/setenv "PATH" (string (seed-env :path) "/bin"))
      (unpack ;(sh/glob (string (make-src :path) "/*")))
      (os/setenv "CC" "x86_64-linux-musl-gcc --static")
      (os/setenv "CFLAGS" *cflags*)
      (sh/$ ["sh" "./configure" (string "--prefix=" (dyn :pkg-out))])
      (sh/$ ["sh" "./build.sh"])
      (sh/$ ["./make" "install"]))))

(def busybox-src
  (fetch
    :url
      "https://busybox.net/downloads/busybox-1.31.1.tar.bz2"
    :hash
      "sha256:d0f940a72f648943c1f2211e0e3117387c31d765137d92bd8284a3fb9752a998"))

(def busybox
  (pkg
    :name "busybox"
    :builder
    (fn []
      (ensure-/bin/sh)
      (os/setenv "PATH" (string (seed-env :path) "/bin:"
                                (make :path) "/bin"))
      (unpack ;(sh/glob (string (busybox-src :path) "/*")))
      (def make-args [
        "HOSTCC=gcc --static"
        "LDFLAGS=--static"
        (string "CFLAGS=" *cflags*)
      ])
      (os/setenv "KCONFIG_NOTIMESTAMP" "1")
      (sh/$ ["make" ;make-args "defconfig"])
      (sh/$ ["make" ;make-args "-j" (string (dyn :parallelism)) "busybox"])
      (def bin (string (dyn :pkg-out) "/bin"))
      (os/mkdir bin)
      (sh/$ ["cp" "./busybox" bin]))))

(defn- core-pkg
  [&keys {:name name :src src}]
  (pkg
    :name name
    :builder
    (fn []
      (ensure-/bin/sh)
      (os/setenv "PATH" (string (seed-env :path) "/bin:"  (make :path) "/bin"))
      (def src-archive (first (sh/glob (string (src :path) "/*"))))
      (unpack src-archive)
      (os/setenv "CC" "x86_64-linux-musl-gcc --static")
      (os/setenv "CFLAGS" *cflags*)
      (os/setenv "LDFLAGS" "--static")
      (sh/$ ["ash" "./configure" "--enable-shared=no" "--prefix" (dyn :pkg-out)])
      (sh/$ ["make" (string "CFLAGS=" *cflags*)
                    (string "-j" (dyn :parallelism))])
      (sh/$ ["make" "install"]))))

(defmacro defsrc
  [name &keys {:url url :hash hash :fname fname}]
  (def src-pkg (gensym))
 ~(def ,name (,fetch :url ,url :hash ,hash :fname ,fname)))

(defmacro defcore
  [name &keys {:src-url src-url :src-hash src-hash}]
  (def src-pkg (gensym))
  (def src-name (symbol name '-src))
 ~(def [,name ,src-name]
    (do
      (def ,src-pkg (,fetch :url ,src-url :hash ,src-hash))
      [(,core-pkg :name ,(string name) :src ,src-pkg) ,src-pkg])))

(defcore dash
  :src-url
    "http://gondor.apana.org.au/~herbert/dash/files/dash-0.5.10.tar.gz"
  :src-hash
    "sha256:ad70e0cc3116b424931c392912b3ebdb8053b21f3fd968c782f0b19fd8ae31ab")

(defcore coreutils
  :src-url
    "https://ftp.gnu.org/gnu/coreutils/coreutils-8.31.tar.xz"
  :src-hash
    "sha256:ff7a9c918edce6b4f4b2725e3f9b37b0c4d193531cac49a48b56c4d0d3a9e9fd")

(defcore awk
  :src-url
    "https://ftp.gnu.org/gnu/gawk/gawk-5.0.1.tar.xz"
  :src-hash
    "sha256:8e4e86f04ed789648b66f757329743a0d6dfb5294c3b91b756a474f1ce05a794")

(defcore diffutils
  :src-url
    "https://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz"
  :src-hash
    "sha256:b3a7a6221c3dc916085f0d205abf6b8e1ba443d4dd965118da364a1dc1cb3a26")

(defcore findutils
  :src-url
    "https://ftp.gnu.org/pub/gnu/findutils/findutils-4.7.0.tar.xz"
  :src-hash
    "sha256:c5fefbdf9858f7e4feb86f036e1247a54c79fc2d8e4b7064d5aaa1f47dfa789a")

(defcore patch
  :src-url
    "https://ftp.gnu.org/gnu/patch/patch-2.7.tar.gz"
  :src-hash
    "sha256:59c29f56faa0a924827e6a60c6accd6e2900eae5c6aaa922268c717f06a62048")

(defcore pkgconf
  :src-url
    "https://distfiles.dereferenced.org/pkgconf/pkgconf-1.6.3.tar.xz"
  :src-hash
    "sha256:61f0b31b0d5ea0e862b454a80c170f57bad47879c0c42bd8de89200ff62ea210")

(defcore sed
  :src-url
    "https://ftp.gnu.org/gnu/sed/sed-4.7.tar.xz"
  :src-hash
    "sha256:2885768cd0a29ff8d58a6280a270ff161f6a3deb5690b2be6c49f46d4c67bd6a")

(defcore grep
  :src-url
    "https://ftp.gnu.org/gnu/grep/grep-3.3.tar.xz"
  :src-hash
    "sha256:b960541c499619efd6afe1fa795402e4733c8e11ebf9fafccc0bb4bccdc5b514")

(defcore which
  :src-url
    "https://ftp.gnu.org/gnu/which/which-2.21.tar.gz"
  :src-hash
    "sha256:f4a245b94124b377d8b49646bf421f9155d36aa7614b6ebf83705d3ffc76eaad")

(defcore tar
  :src-url
    "https://ftp.gnu.org/gnu/tar/tar-1.32.tar.gz"
  :src-hash
    "sha256:b59549594d91d84ee00c99cf2541a3330fed3a42c440503326dab767f2fbb96c")

(defcore gzip
  :src-url
    "https://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.gz"
  :src-hash
    "sha256:c91f74430bf7bc20402e1f657d0b252cb80aa66ba333a25704512af346633c68")

(defsrc bzip2-src
  :url
    "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"
  :hash
    "sha256:ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269")

(def bzip2
  (pkg
    :name "bzip2"
    :builder
    (fn []
      (os/setenv "PATH" (string (seed-env :path) "/bin:"  (make :path) "/bin"))
      (unpack ;(sh/glob (string (bzip2-src :path) "/*")))
      (->> (slurp "Makefile")
           (string/replace "SHELL=/bin/sh" "SHELL=sh")
           (spit "Makefile"))
      (sh/$ ["make" "install"
               "CC=x86_64-linux-musl-gcc --static"
               (string "CFLAGS=" *cflags*)
               "LDFLAGS=--static"
               (string "PREFIX=" (dyn :pkg-out))]))))

(defcore lzip
  :src-url
    "http://download.savannah.gnu.org/releases/lzip/lzip-1.21.tar.gz"
  :src-hash
    "sha256:e48b5039d3164d670791f9c5dbaa832bf2df080cb1fbb4f33aa7b3300b670d8b")

(defcore xz
  :src-url
    "https://tukaani.org/xz/xz-5.2.4.tar.gz"
  :src-hash
    "sha256:b512f3b726d3b37b6dc4c8570e137b9311e7552e8ccbab4d39d47ce5f4177145")

(defn link-farm
  [paths dest &opt pred]
  (each p paths
    (each name (os/dir p)
      (def path (string p "/" name))
      (def link (string dest "/" name))
      (unless (os/lstat link)
        (when (or (nil? pred) (pred path))
          (def target (os/realpath (string p "/" name)))
          (os/symlink target link))))))

(defn make-combined-env
  [&keys {:name name
          :bin-pkgs bin-pkgs
          :lib-pkgs lib-pkgs
          :post-build post-build}]
  (default bin-pkgs [])
  (pkg
    :name name
    :builder
    (fn []
      (when bin-pkgs
        (def bin-out (string (dyn :pkg-out) "/bin"))
        (os/mkdir bin-out)
        (link-farm (map |(string ($ :path) "/bin") bin-pkgs) bin-out))
      (when lib-pkgs
        (def lib-out (string (dyn :pkg-out) "/lib"))
        (def pkgconfig-out (string lib-out "/pkgconfig"))
        (os/mkdir lib-out)
        (os/mkdir pkgconfig-out)
        (def lib-dirs (map |(string ($ :path) "/lib") lib-pkgs))
        (def pkgconfig-dirs (filter os/stat (map |(string $ "/pkgconfig") lib-dirs)))
        (def reg? |(= (get (os/stat $) :mode) :file))
        (link-farm lib-dirs lib-out reg?)
        (link-farm pkgconfig-dirs pkgconfig-out reg?))
      (when post-build
        (post-build)))))

(def core-env
  (make-combined-env
    :name
      "core-env"
    :bin-pkgs
      [
        dash
        coreutils
        awk
        diffutils
        findutils
        patch
        sed
        grep
        which
        tar
        bzip2
        gzip
        lzip
        xz
      ]
    :post-build
    (fn []
      (os/cd (string (dyn :pkg-out) "/bin"))
      (os/symlink "./dash" "sh"))))

(defsrc musl-cross-make-src
  :url "https://github.com/richfelker/musl-cross-make/archive/v0.9.9.tar.gz"
  :hash "sha256:ff3e2188626e4e55eddcefef4ee0aa5a8ffb490e3124850589bcaf4dd60f5f04")

(defsrc gcc-src
  :url "https://ftp.gnu.org/pub/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz"
  :hash "sha256:ea6ef08f121239da5695f76c9b33637a118dcf63e24164422231917fa61fb206")

(defsrc binutils-src
  :url "https://ftp.gnu.org/pub/gnu/binutils/binutils-2.33.1.tar.xz"
  :hash "sha256:ab66fc2d1c3ec0359b8e08843c9f33b63e8707efdff5e4cc5c200eae24722cbf")

(defsrc gmp-src
  :url "https://ftp.gnu.org/pub/gnu/gmp/gmp-6.1.2.tar.bz2"
  :hash "sha256:5275bb04f4863a13516b2f39392ac5e272f5e1bb8057b18aec1c9b79d73d8fb2")

(defsrc mpc-src
  :url "https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz"
  :hash "sha256:6985c538143c1208dcb1ac42cedad6ff52e267b47e5f970183a3e75125b43c2e")

(defsrc mpfr-src
  :url "https://ftp.gnu.org/pub/gnu/mpfr/mpfr-4.0.2.tar.bz2"
  :hash "sha256:c05e3f02d09e0e9019384cdd58e0f19c64e6db1fd6f5ecf77b4b1c61ca253acc")

(defsrc musl-src
  :url "https://www.musl-libc.org/releases/musl-1.2.0.tar.gz"
  :hash "sha256:c6de7b191139142d3f9a7b5b702c9cae1b5ee6e7f57e582da9328629408fd4e8")

(defsrc linux-src
  :url "https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.90.tar.xz"
  :hash "sha256:29d86c0a6daf169ec0b4b42a12f8d55dc894c52bd901f876f52a05906a5cf7fd")

# XXX Why does musl cross make download this?
(def- config.sub
  (fetch
    :url "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=3d5db9ebe860"
    :hash "sha256:75d5d255a2a273b6e651f82eecfabf6cbcd8eaeae70e86b417384c8f4a58d8d3"
    :file-name "config.sub"))

(def mcm-gcc
  (pkg
    :name "mcm-gcc"
    :builder
    (fn []
      (ensure-/bin/sh)

      (defn archive-path
        [src-pkg]
        (first (sh/glob (string (src-pkg :path) "/*"))))

      (os/setenv "PATH"
        (string
          (make :path) "/bin:"
          # busybox patch fails on some of the mcm patches.
          (patch :path) "/bin:"
          (seed-env :path) "/bin"))
      
      (unpack (archive-path musl-cross-make-src))

      (os/mkdir "sources")
      (each src [gcc-src binutils-src musl-src gmp-src mpc-src mpfr-src linux-src]
        (sh/$ ["cp" (archive-path src) "./sources"]))
      (sh/$ ["cp" (string (config.sub :path) "/config.sub") "./sources"])
      
      (spit "config.mak"
        (string
          "TARGET=x86_64-linux-musl\n"
          "LINUX_VER = 4.19.90\n"
          "OUTPUT=" (dyn :pkg-out) "\n"
          "GCC_CONFIG += --disable-libquadmath --disable-decimal-float --disable-libitm --disable-fixed-point --disable-lto\n"
          "COMMON_CONFIG += CC=\"gcc -static --static\"\n"
          "COMMON_CONFIG += CXX=\"g++ -static --static\"\n"
          "COMMON_CONFIG += CFLAGS=\"-O3\" CXXFLAGS=\"-O3\" LDFLAGS=\"-s\"\n"
          "DL_CMD=false\n"
          "COWPATCH=" (os/cwd) "/cowpatch.sh\n"))
      # XXX This patch is not very robust, remove it if you find a better way.
      (->> (slurp "litecross/Makefile")
           (string/replace-all "kernel_headers && $(MAKE) "
                               "kernel_headers && $(MAKE) HOSTCFLAGS=--static ")
           (spit "litecross/Makefile"))
      # XXX In builds that don't isolate /bin/sh, some versions of bash fail...
      (->> (slurp "cowpatch.sh")
                 (string/replace "#!/bin/sh"
                                 (string "#!" (dash :path) "/bin/dash"))
                 (spit "cowpatch.sh"))
      (sh/$ ["make" "extract_all"])
      (sh/$ ["make" (string "-j" (dyn :parallelism))])
      (sh/$ ["make" "install"])
      
      (let [start-dir (os/cwd)]
        (defer (os/cd start-dir)
          (os/cd (string (dyn :pkg-out) "/bin"))
          (os/symlink "./x86_64-linux-musl-ar" "ar")
          (os/symlink "./x86_64-linux-musl-ranlib" "ranlib")
          (os/symlink "./x86_64-linux-musl-strip" "strip")
          (os/symlink "./x86_64-linux-musl-objdump" "objdump")
          (os/symlink "./x86_64-linux-musl-gcc" "cc")
          (os/symlink "./x86_64-linux-musl-gcc" "gcc")
          (os/symlink "./x86_64-linux-musl-c++" "c++")
          (os/symlink "./x86_64-linux-musl-c++" "g++")
          (os/symlink "./x86_64-linux-musl-ld" "ld"))))))


# The runtime package is a gcc installation with only dynamic libraries.
(defn- prepare-gcc-rt
  [remove-c++]
  (pkg
    :name "rt"
    :builder
    (fn []
      (os/setenv "PATH" (string (seed-env :path) "/bin"))
      (sh/$ ["cp" "-rv" ;(sh/glob (string (mcm-gcc :path) "/*")) (dyn :pkg-out)])
      (sh/$ ["chmod" "-R" "+w" (dyn :pkg-out)])
      
      (when remove-c++
        (sh/$ ["rm" ;(sh/glob (string (dyn :pkg-out) "/x86_64-linux-musl/lib/*c++*"))]))

      # Remove things that aren't dynamic libs.
      (sh/$ ["find" (dyn :pkg-out) "-not" "-name" "*.so*" "-delete"])
      
      # XXX Fix broken link, why is this broken?
      (def ld.so (string (dyn :pkg-out) "/x86_64-linux-musl/lib/ld-musl-x86_64.so.1"))
      (os/rm ld.so)
      (os/symlink "libc.so" ld.so)
      
      # Manually configure path with musl config.
      (os/mkdir (string (dyn :pkg-out) "/x86_64-linux-musl/etc"))
      (spit 
        (string (dyn :pkg-out) "/x86_64-linux-musl/etc/ld-musl-x86_64.path")
        (string (dyn :pkg-out) "/x86_64-linux-musl/lib\n")))))

(defn- prepare-gcc
  [gcc-rt]
  (pkg
    :name "gcc"
    :builder
    (fn []
      (os/setenv "PATH" (string (seed-env :path) "/bin"))
      (sh/$ ["cp" "-rv" ;(sh/glob (string (mcm-gcc :path) "/*")) (dyn :pkg-out)])
      (sh/$ ["chmod" "-R" "+w" (dyn :pkg-out)])
      (def specs (sh/$$ [(string (dyn :pkg-out) "/bin/gcc") "-dumpspecs"]))
      (def new-specs
        (string/replace-all
          "/lib/ld-musl-x86_64.so.1"
          (string (gcc-rt :path) "/x86_64-linux-musl/lib/ld-musl-x86_64.so.1")
          specs))
      (spit (string (dyn :pkg-out) "/x86_64-linux-musl/lib/specs") new-specs))))


(def gcc-rt (prepare-gcc-rt false))
(def gcc-rt-lite (prepare-gcc-rt true))
(def gcc (prepare-gcc gcc-rt))
(def gcc-lite (prepare-gcc gcc-rt-lite))

(def core-build-env
  (make-combined-env
    :name
      "core-build-env"
    :bin-pkgs
      [
        core-env
        gcc
        pkgconf
        make
      ]
    :post-build
      (fn
        []
        (os/cd (string (dyn :pkg-out) "/bin"))
        (os/symlink "pkgconf" "pkg-config"))))

(defn std-unpack-phase []
  (def src (dyn :pkg-src))
  (unpack ;(sh/glob (string (src :path) "/*"))))

(defn std-configure-phase []
  (os/setenv "CFLAGS" "-O3 -fstack-protector")
  (when (os/stat "./configure")
    (sh/$ ["./configure" "--prefix" (dyn :pkg-out)])))

(defn std-install-phase []
  (sh/$ ["make" (string "-j" (dyn :parallelism))])
  (sh/$ ["make" "install" (string "PREFIX=" (dyn :pkg-out))]))

(defn std-pkg
  [&keys {
    :name name
    :src src
    :bin-inputs bin-inputs
    :unpack-phase unpack-phase    
    :configure-phase configure-phase
    :install-phase install-phase
  }]

  (default bin-inputs [])
  (default unpack-phase std-unpack-phase)
  (default configure-phase std-configure-phase)
  (default install-phase std-install-phase)

  (pkg
    :name name
    :builder
    (fn std-builder []
      (ensure-/bin/sh)
      (def all-bin-inputs (array/concat @[] bin-inputs [core-build-env]))
      (os/setenv "PATH"
        (string/join (map |(string ($ :path) "/bin") all-bin-inputs) ":"))
      (with-dyns [:pkg-src src]
        (unpack-phase))
      (configure-phase)
      (install-phase))))

(defmacro defpkg
  [name &keys {
    :src-url src-url
    :src-hash src-hash
    :bin-inputs bin-inputs
    :unpack-phase unpack-phase    
    :configure-phase configure-phase
    :install-phase install-phase
  }]
  (def src-pkg (gensym))
  (def src-name (symbol name '-src))
 ~(def [,name ,src-name]
    (do
      (def ,src-pkg (,fetch :url ,src-url :hash ,src-hash))
      [(,std-pkg
          :name ,(string name)
          :src ,src-pkg
          :bin-inputs ,bin-inputs
          :unpack-phase ,unpack-phase    
          :configure-phase ,configure-phase
          :install-phase ,install-phase)
       ,src-pkg])))

(def seed-out
  (do
    (def new-seed
      (pkg
        :builder
        (fn []
          (os/setenv "PATH" (string (seed-env :path) "/bin"))
          (sh/$ ["cp" "-rv" ;(sh/glob (string (mcm-gcc :path) "/*")) (dyn :pkg-out)])
          (sh/$ ["chmod" "-R" "+w" (dyn :pkg-out)])
          # XXX This is done for reproducibile build, is there a better way? 
          (os/rm ;(sh/glob (string (dyn :pkg-out) "/libexec/gcc/x86_64-linux-musl/*/install-tools/fixincl")))
          (sh/$ ["cp" (string (busybox :path) "/bin/busybox") (string (dyn :pkg-out) "/bin")])
          (os/cd (string (dyn :pkg-out) "/bin"))
          (each app (string/split "\n" (sh/$$_ ["./busybox" "--list"]))
            (os/symlink "./busybox" app)))))
      (pkg
        :name "seed-out"
        :content {"seed.tar.gz" {:content seed-hash}}
        :builder
        (fn []
          (os/setenv "PATH" 
            (string/join  [(string (tar :path) "/bin")
                           (string (new-seed :path) "/bin")] ":"))
          (with [f (file/open (string (dyn :pkg-out) "/seed.tar.gz") :wb+)]
            (os/cd (new-seed :path))
            (sh/$ [
              "sh" "-c"
              "find . | grep -v \".hpkg.jdn\" | LC_ALL=C sort | tar --owner=root:0 --group=root:0 --mtime='UTC 2019-01-01' --no-recursion -v -T - -cf - | gzip -9"
            ] :redirects [[stdout f]] ))))))
